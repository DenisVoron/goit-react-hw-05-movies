{"version":3,"file":"static/js/387.06f36fb1.chunk.js","mappings":"kPAEaA,EAAWC,EAAAA,GAAAA,GAAH,8DAKRC,EAAmBD,EAAAA,GAAAA,KAAH,sBAEhBE,EAAiBF,EAAAA,GAAAA,EAAH,wB,SCgD3B,EA/Ca,WACT,OAA4BG,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAqBR,OAnBAE,EAAAA,EAAAA,YAAU,YAENC,EAAAA,EAAAA,GAAUH,GACLI,MAAK,SAAAC,GACEN,EAAUM,EAAKC,KAAKC,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC3C,MAAO,CACHC,OAAQH,EAAY,0CACqBA,GAbjD,sCAeQC,KAAMA,EACNC,UAAWA,EAElB,IAER,IACAE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GAEnB,GAAE,CAACb,KAGI,SAACP,EAAD,UACKK,EAAOS,KAAI,YAAkC,IAA/BI,EAA8B,EAA9BA,OAAQF,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACzB,OACI,2BACI,gBAAKM,IAAKL,EAAQM,IAAKR,EAAMS,MAAM,MAAMC,OAAO,SAChD,uBAAIV,KACJ,UAACb,EAAD,yBAEI,SAACD,EAAD,UACKe,SANJD,EAWhB,KAGhB,C,oLCnDKW,EAAU,gCACVC,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBC,MAAM,GAAD,OAAIH,EAAJ,sCAAyCC,IADlE,cACGG,EADH,gBAEUA,EAASC,OAFnB,0GAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,uFACoBJ,MAAM,GAAD,OAAIH,EAAJ,gCAAmCC,EAAnC,4DAA8FM,IADvH,cACGH,EADH,gBAEUA,EAASC,OAFnB,0GAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAkC5B,GAAlC,uFACoBuB,MAAM,GAAD,OAAIH,EAAJ,iBAAoBpB,EAApB,oBAAkCqB,EAAlC,oBADzB,cACGG,EADH,gBAEUA,EAASC,OAFnB,0GAKA,SAAetB,EAAtB,+CAAO,OAAP,oBAAO,WAAyBH,GAAzB,uFACoBuB,MAAM,GAAD,OAAIH,EAAJ,iBAAoBpB,EAApB,4BAA0CqB,EAA1C,oBADzB,cACGG,EADH,gBAEUA,EAASC,OAFnB,0GAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4B7B,GAA5B,uFACoBuB,MAAM,GAAD,OAAIH,EAAJ,iBAAoBpB,EAApB,4BAA0CqB,EAA1C,2BADzB,cACGG,EADH,gBAEUA,EAASC,OAFnB,0G,sBCxBP,SAASK,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAO1B,GAEP,YADAoB,EAAOpB,EAET,CAEIyB,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOnC,KAAK8B,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/fetch-api.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Castlist = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const WrapperCharacter = styled.span``;\n\nexport const CharacterDescr = styled.p`\n`;","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchCast } from \"../../services/fetch-api\";\n\nimport { Castlist,CharacterDescr, WrapperCharacter } from \"./Cast.styled\";\n\nconst placeholder = \"https://via.placeholder.com/160x240\";\n\nconst Cast = () => {\n    const [actors, setActors] = useState([]);\n    const { id } = useParams();\n\n    useEffect(() => {\n\n        fetchCast(id)\n            .then(data => {\n                    setActors(data.cast.map(({ profile_path, name, character }) => {\n                        return {\n                            poster: profile_path\n                                ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                                : placeholder,\n                            name: name,\n                            character: character,\n                        };\n                    })\n                    );\n            })\n            .catch(error => console.log(error));\n\n    }, [id]);\n\n    return (\n            <Castlist>\n                {actors.map(({ poster, name, character }) => {\n                    return (\n                        <li key={name}>\n                            <img src={poster} alt={name} width=\"180\" height=\"240\"/>\n                            <p>{name}</p>\n                            <CharacterDescr>\n                                Character:\n                                <WrapperCharacter>\n                                    {character}\n                                </WrapperCharacter>\n                            </CharacterDescr>\n                        </li>\n                    )\n                })}\n            </Castlist>\n    );\n};\n\nCast.propTypes = {\n  actors: PropTypes.string,\n};\n\nexport default Cast;","const API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'e338843fab235d92204cc1e536c80b21';\n\n\nexport async function fetchHome() {\n    const response = await fetch(`${API_URL}trending/movie/day?api_key=${API_KEY}`);\n    return await response.json();\n}\n\nexport async function fetchMovies(query) {\n    const response = await fetch(`${API_URL}search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`);\n    return await response.json();\n}\n\nexport async function fetchMoviesDetails(id) {\n    const response = await fetch(`${API_URL}movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return await response.json();\n};\n\nexport async function fetchCast(id) {\n    const response = await fetch(`${API_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`)\n    return await response.json();\n}\n\nexport async function fetchReviews(id) {\n    const response = await fetch(`${API_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return await response.json();\n}\n\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["Castlist","styled","WrapperCharacter","CharacterDescr","useState","actors","setActors","id","useParams","useEffect","fetchCast","then","data","cast","map","profile_path","name","character","poster","catch","error","console","log","src","alt","width","height","API_URL","API_KEY","fetchHome","fetch","response","json","fetchMovies","query","fetchMoviesDetails","fetchReviews","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}