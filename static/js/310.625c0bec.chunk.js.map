{"version":3,"file":"static/js/310.625c0bec.chunk.js","mappings":"wQAGaA,EAAUC,EAAAA,GAAAA,IAAH,sJAQPC,EAAOD,EAAAA,GAAAA,KAAH,0BAIJE,EAAQF,EAAAA,GAAAA,MAAH,gHAOLG,EAASH,EAAAA,GAAAA,OAAH,0EAMNI,GAAOJ,EAAAA,EAAAA,IAAOK,EAAAA,IAAPL,CAAH,wE,SCsDjB,EA1Ee,WAEb,OAAwCM,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,SACpC,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAASF,GAA0B,IAA7D,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAEM,KAAVJ,IAIJK,EAAAA,EAAAA,IAAYL,GACTM,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZR,EACEQ,EAAKG,QAAQC,KAAI,kBAAoB,CAAEC,GAAtB,EAAGA,GAA2BC,MAA9B,EAAOA,MAAP,IAEpB,IACFC,OAAM,SAAAC,GAAK,OAAIP,QAAQC,IAAIM,EAAhB,GAEf,GAAE,CAACf,IAUJ,OACE,6BACE,SAACf,EAAD,WACE,UAACE,EAAD,CAAM6B,OAAO,GAAGC,SAXD,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAQF,EAAEG,OAAOrB,MAAMoB,MAC7BnB,EAASmB,GACT1B,EAAgB,CAAEM,MAAOoB,GAC1B,EAKK,WACE,SAAChC,EAAD,CACEkC,KAAK,OACLC,KAAK,WAEP,SAAClC,EAAD,CAAQiC,KAAK,SAAb,UACE,SAAChC,EAAD,YAIN,wBACGQ,EAAOa,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACjB,OACE,yBACE,SAAC,KAAD,CACEW,GAAE,UAAKZ,GACPa,OAAQ,CAAEC,WAAW,SAAD,OAAW1B,IAC/B2B,MAAO,CAAEC,KAAM1B,GAHjB,SAKGW,KANID,EAUZ,QAIR,C,oLCvEKiB,EAAU,gCACVC,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBC,MAAM,GAAD,OAAIH,EAAJ,sCAAyCC,IADlE,cACGG,EADH,gBAEUA,EAASC,OAFnB,0GAKA,SAAe7B,EAAtB,+CAAO,OAAP,oBAAO,WAA2BL,GAA3B,uFACoBgC,MAAM,GAAD,OAAIH,EAAJ,gCAAmCC,EAAnC,4DAA8F9B,IADvH,cACGiC,EADH,gBAEUA,EAASC,OAFnB,0GAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAkCvB,GAAlC,uFACoBoB,MAAM,GAAD,OAAIH,EAAJ,iBAAoBjB,EAApB,oBAAkCkB,EAAlC,oBADzB,cACGG,EADH,gBAEUA,EAASC,OAFnB,0GAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAyBxB,GAAzB,uFACoBoB,MAAM,GAAD,OAAIH,EAAJ,iBAAoBjB,EAApB,4BAA0CkB,EAA1C,oBADzB,cACGG,EADH,gBAEUA,EAASC,OAFnB,0GAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BzB,GAA5B,uFACoBoB,MAAM,GAAD,OAAIH,EAAJ,iBAAoBjB,EAApB,4BAA0CkB,EAA1C,2BADzB,cACGG,EADH,gBAEUA,EAASC,OAFnB,0G","sources":["pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","services/fetch-api.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { HiSearch } from \"react-icons/hi\";\n\nexport const Wrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  margin-bottom: 16px;\n  text-transform: uppercase;\n`;\n\nexport const Form = styled.form`\n\n`\n\nexport const Input = styled.input`\n  width: 300px;\n  padding: 8px 32px 4px 8px;\n  border-radius: 4px;\n  font: inherit;\n`;\n\nexport const Button = styled.button`\nmargin-left: 7px;\nwidth: 40px;\n  height: 38px;\n`;\n\nexport const Icon = styled(HiSearch)`\n  width: 20px;\n  height: 20px;\n  right: 6px;\n`;\n//position: absolute;","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nimport { fetchMovies } from \"../../services/fetch-api\";\n\nimport { Wrapper,Form, Input, Button, Icon } from \"./Movies.styled\";\n\nconst Movies = () => {\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryParam = searchParams.get('query');\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState(queryParam ? queryParam : '');\n  const location = useLocation();\n\n  useEffect(() => {\n\n    if (query === '') {\n      return;\n    };\n\n    fetchMovies(query)\n      .then(data => {\n          console.log(data);\n          setMovies(\n            data.results.map(({ id, title }) => ({ id: id, title: title })),\n          );\n        })\n      .catch(error => console.log(error));\n    \n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const value = e.target.query.value;\n    setQuery(value);\n    setSearchParams({ query: value });\n  };\n\n  return (\n    <main>\n      <Wrapper>\n        <Form action=\"\" onSubmit={handleSubmit}>\n          <Input\n            type=\"text\"\n            name=\"query\"     \n          />\n          <Button type=\"submit\">\n            <Icon />\n          </Button>\n        </Form>\n      </Wrapper>\n      <ul>\n        {movies.map(({ id, title }) => {\n          return (\n            <li key={id}>\n              <Link\n                to={`${id}`}\n                search={{ querySerch: `query=${query}` }}\n                state={{ from: location }}\n              >\n                {title}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </main>\n  );\n};\n\nMovies.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Movies;","const API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'e338843fab235d92204cc1e536c80b21';\n\n\nexport async function fetchHome() {\n    const response = await fetch(`${API_URL}trending/movie/day?api_key=${API_KEY}`);\n    return await response.json();\n}\n\nexport async function fetchMovies(query) {\n    const response = await fetch(`${API_URL}search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`);\n    return await response.json();\n}\n\nexport async function fetchMoviesDetails(id) {\n    const response = await fetch(`${API_URL}movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return await response.json();\n};\n\nexport async function fetchCast(id) {\n    const response = await fetch(`${API_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`)\n    return await response.json();\n}\n\nexport async function fetchReviews(id) {\n    const response = await fetch(`${API_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return await response.json();\n}\n\n"],"names":["Wrapper","styled","Form","Input","Button","Icon","HiSearch","useSearchParams","searchParams","setSearchParams","queryParam","get","useState","movies","setMovies","query","setQuery","location","useLocation","useEffect","fetchMovies","then","data","console","log","results","map","id","title","catch","error","action","onSubmit","e","preventDefault","value","target","type","name","to","search","querySerch","state","from","API_URL","API_KEY","fetchHome","fetch","response","json","fetchMoviesDetails","fetchCast","fetchReviews"],"sourceRoot":""}